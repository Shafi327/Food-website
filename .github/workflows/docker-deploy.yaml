# name: Docker Build & Deploy to EC2

# on:
#   push:
#     branches:
#       - main  # Runs when code is pushed to main branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     - name: Log in to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     - name: Build Docker Image
#       run: docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd .

#     - name: Push Docker Image to Docker Hub
#       run: docker push ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd

#     - name: Deploy on EC2
#       uses: appleboy/ssh-action@v0.1.4
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USER }}
#         key: ${{ secrets.EC2_SSH_KEY }}
#         script: |
#           # Navigate to your project folder
#           cd /home/ubuntu/myapp
#           docker pull ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd
#           docker stop myapp || true
#           docker rm myapp || true
#           docker run -d --name myapp -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd



# name: Deploy to AWS with Docker Compose

# on:
#   push:
#     branches:
#       - main  # Trigger on push to main branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 0

#     # Debug: Check if Dockerfile exists
#     - name: Debug - List Files
#       run: ls -lah

#     # Step 1: Build and Push Docker Image to Docker Hub
#     - name: Build and Push Docker Image
#       run: |
#         if [ ! -f Dockerfile ]; then
#           echo "ERROR: Dockerfile not found in $(pwd)"
#           exit 1
#         fi

#         docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd .
#         echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#         docker push ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd

#     # Step 2: Set up SSH Key for connecting to AWS EC2
#     - name: Set up SSH Key
#       run: |
#         mkdir -p ~/.ssh
#         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#         ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

#     # Step 3: Deploy to AWS EC2
#     - name: Deploy via SSH
#       run: |
#         ssh ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
#         # Navigate to the application directory
#         cd /home/ubuntu/myapp

#         # Stop and remove any existing containers
#         docker-compose down

#         # Remove old image
#         docker rmi -f ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd || true

#         # Pull latest image from Docker Hub
#         docker pull ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd

#         # Run the application with Docker Compose
#         echo "
#         version: '3.8'
#         services:
#           app:
#             image: ${{ secrets.DOCKER_USERNAME }}/docker-deploy-cicd
#             container_name: myapp_container
#             ports:
#               - '80:80'
#         " > docker-compose.yml

#         docker-compose up -d
#         EOF


name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -t shafi627/backend:latest ./backend
          docker push shafi627/backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t shafi627/frontend:latest frontend/
          docker push shafi627/frontend:latest

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to your project folder
            cd /home/ubuntu/myapp
            docker pull shafi627/backend:latest
            docker pull shafi627/frontend:latest
            docker-compose up -d
